#!/usr/bin/env python
#
# Copyright 2015 British Broadcasting Corporation
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""

Unit-tests for analysis code that matches up expected and observed beep/flash
timings and calculates statistics such as how much the observations varied
from the expected.
"""

import os
import sys

sys.path.append(os.path.dirname(os.path.abspath(__file__))+"/../src")


import unittest

from analyse import correlate


class Test_DoComparison(unittest.TestCase):
    """\
    Unit-tests for analysis code that matches up expected and observed beep/flash
    timings and calculates statistics such as how much the observations varied
    from the expected.
    """


    fakeMetadata = {
        "eventCentreTimes": [
            0.14, 0.54, 1.14, 1.38, 2.14, 2.38, 3.14, 3.38, 4.14, 4.38,
            5.14, 5.38, 6.14, 6.54, 7.14, 7.54, 8.14, 8.38, 9.14, 9.38, 
            10.14, 10.38, 11.14, 11.38, 12.14, 12.54, 13.14, 13.38, 14.14, 
            14.54, 15.14, 15.38, 16.14, 16.38, 17.14, 17.38, 18.14, 18.54, 
            19.14, 19.54, 20.14, 20.54, 21.14, 21.54, 22.14, 22.38, 23.14, 
            23.38, 24.14, 24.54, 25.14, 25.38, 26.14, 26.38, 27.14, 27.38, 
            28.14, 28.54, 29.14, 29.38, 30.14, 30.54, 31.14, 31.54, 32.14, 
            32.38, 33.14, 33.38, 34.14, 34.54, 35.14, 35.54, 36.14, 36.54, 
            37.14, 37.38, 38.14, 38.54, 39.14, 39.38, 40.14, 40.54, 41.14, 
            41.38, 42.14, 42.38, 43.14, 43.54, 44.14, 44.54, 45.14, 45.54, 
            46.14, 46.54, 47.14, 47.54, 48.14, 48.38, 49.14, 49.54, 50.14, 
            50.38, 51.14, 51.38, 52.14, 52.38, 53.14, 53.38, 54.14, 54.54, 
            55.14, 55.54, 56.14, 56.54, 57.14, 57.38, 58.14, 58.38, 59.14, 
            59.38, 60.14, 60.54, 61.14, 61.38, 62.14, 62.38, 63.14, 63.54, 
            64.14, 64.38, 65.14, 65.38, 66.14, 66.54, 67.14, 67.54, 68.14, 
            68.38, 69.14, 69.54, 70.14, 70.54, 71.14, 71.38, 72.14, 72.54, 
            73.14, 73.38, 74.14, 74.54, 75.14, 75.54, 76.14, 76.38, 77.14, 
            77.54, 78.14, 78.54, 79.14, 79.54, 80.14, 80.54, 81.14, 81.38, 
            82.14, 82.54, 83.14, 83.54, 84.14, 84.38, 85.14, 85.38, 86.14, 
            86.38, 87.14, 87.54, 88.14, 88.54, 89.14, 89.38, 90.14, 90.54, 
            91.14, 91.38, 92.14, 92.38, 93.14, 93.54, 94.14, 94.38, 95.14, 
            95.54, 96.14, 96.54, 97.14, 97.54, 98.14, 98.38, 99.14, 99.54, 
            100.14, 100.54, 101.14, 101.54, 102.14, 102.38, 103.14, 103.38, 
            104.14, 104.54, 105.14, 105.54, 106.14, 106.38, 107.14, 107.38, 
            108.14, 108.54, 109.14, 109.38, 110.14, 110.54, 111.14, 111.38, 
            112.14, 112.54, 113.14, 113.38, 114.14, 114.54, 115.14, 115.54, 
            116.14, 116.54, 117.14, 117.54, 118.14, 118.54, 119.14, 119.54, 
            120.14, 120.54, 121.14, 121.38, 122.14, 122.38, 123.14, 123.38, 
            124.14, 124.38, 125.14, 125.38, 126.14, 126.38, 127.14
        ],
        "durationSecs": 127,
        "patternWindowLength": 7,
        "fps": 50,
        "size": [854, 480]
    }

    fakeTickRate = 90000
    fakeStartSyncTime = 900000

    fakeObservationData = [
        (1831771.7898603398, 135.0),
        (1853407.46584142,   135.0),
        (1921719.9807812609, 135.0),
        (1943427.2535603093, 135.0),
        (2011827.6186154634, 135.0),
        (2033356.5891927797, 135.0),
        (2101738.763301872,  135.0),
        (2137768.8442081306, 135.0),
        (2191781.0006166208, 135.0),
        (2227695.3519260106, 135.0),
        (2281857.0486125397, 135.0),
        (2317794.818556395,  135.0),
        (2371711.9370390167, 135.0),
        (2407752.602813109,  135.0),
        (2461743.393166699,  135.0),
        (2483377.7041404084, 135.0),
        (2551722.4302199697, 135.0),
        (2573435.4258328187, 135.0),
        (2641737.477376113,  135.0),
        (2677785.0958894417, 135.0),
        (2731773.939625565,  135.0),
        (2753400.9081957666, 135.0),
        (2821849.6533542136, 135.0),
        (2843383.24493125,   135.0),
        (2911776.011982872,  135.0),
        (2933350.531858733,  135.0),
        (3001779.864915821,  135.0),
        (3037855.81063027,   135.0),
        (3091817.558820089,  135.0),
        (3113338.3511138516, 135.0)]


    fakeObservationData2 = [
        (1364968.5824699998, 233.4525735755456),
        (1386706.07716875,   233.47140883336996),
        (1454978.9124675,    233.53056636193338),
        (1490983.0444574999, 233.56176347665144),
        (1544989.24245375,   233.60855914843754),
        (1580993.374455,     233.6397562630392),
        (1634999.57245125,   233.6865519349417),
        (1656737.06713875,   233.70538719288245),
        (1725009.9024375,    233.76454472144587),
        (1746747.39713625,   233.78337997938664),
        (1815020.2324350001, 233.84253750806644),
        (1836757.7271225,    233.8613783908463),
        (1905030.5624212502, 233.9205302945706),
        (1926768.05712,      233.93936555239497),
        (1995040.8924187499, 233.99852308095834),
        (2031045.024414375,  234.02972582051552),
        (2085051.222405,     234.0765158674625),
        (2106788.71710375,   234.09535112540325),
        (2175061.5524025,    234.15450865396667),
        (2211020.67922875,   234.18567239713056),
        (2265026.877225,     234.2324680690331),
        (2286809.3770875,    234.25133669841156),
        (2355037.2072225,    234.31045523058174),
        (2376774.7019100003, 234.3292904885225),
        (2445047.53720875,   234.38845364227424),
        (2466785.0319075,    234.40728327502666),
        (2535102.87237,      234.46647980021612),
        (2571061.99919625,   234.49764354314723),
        (2625113.202361875,  234.54447821167582),
        (2661072.32919375,   234.57563070469587),
        (2715078.52719,      234.62242637659838),
        (2751082.65918,      234.6536291163884),
        (2805088.85717625,   234.7004247882909),
        (2841092.9891775,    234.73161627793704),
        (2895099.18717375,   234.77841194983952),
        (2916836.681866875,  234.7972528327358),
        (2985109.51716,      234.8564103612992),
        (3006847.0118587497, 234.87523999428444),
        (3075119.8471574998, 234.93439752261503),
        (3111123.97915875,   234.96559463721667),
        (3165130.17714375,   235.01239593430753),
        (3186867.6718424996, 235.03122556752558),
        (3255140.5071412497, 235.09038309562334),
        (3276878.001834375,  235.1092239785196),
        (3345150.8371275,    235.16838150685015),
        (3366888.33182625,   235.18721114006826),
        (3435161.1671249997, 235.2463686688645),
        (3471165.2991262497, 235.27756578346617),
        (3525171.4971224996, 235.32436145536866),
        (3546908.9918099996, 235.34319671307657),
        (3615181.82710875,   235.40235424163998),
        (3651185.9591099997, 235.43355135624165),
        (3705192.15710625,   235.48034702814414),
        (3741196.28909625,   235.5115441427458),
        (3795202.4870924996, 235.5583398146483),
        (3816939.981785625,  235.5771806977774),
        (3885212.8170899996, 235.6363326013853),
        (3906950.3117774995, 235.6551678590932),
        (3975223.14707625,   235.71432538765663),
        (4011227.2790775,    235.74552250225827),
        (4065233.4770737495, 235.7923181743936),
        (4101237.6090637497, 235.82351528876242),
        (4155243.80706,      235.8703109606649),
        (4191247.9390612496, 235.9015080752666),
        (4245254.1370575,    235.94830374740195),
        (4266991.631744999,  235.96713900534266),
        (4335264.46704375,   236.02629653344044),
        (4371268.599045,     236.05749364850777),
        (4425274.797041249,  236.10428932041026),
        (4447012.29172875,   236.12312457788536),
        (4515285.1270275,    236.18228210644875),
        (4551289.2590287505, 236.21347922105042),
        (4605295.457025,     236.26027489341857),
        (4627032.9517125,    236.27911015135933),
        (4695305.78701125,   236.33826767992275),
        (4717043.28171,      236.35710293739783),
        (4785316.11700875,   236.41626046596124),
        (4821320.24899875,   236.44746320575123),
        (4875326.446994999,  236.49425325339672),
        (4911330.57899625,   236.52545036706704),
        (4965336.7769925,    236.57224603943519),
        (5001340.9089825,    236.6034487787596),
        (5055347.10697875,   236.65024445066203),
        (5091351.23898,      236.68143594054106),
        (5145357.43697625,   236.72823161197783),
        (5181361.56896625,   236.75943435223357),
        (5235367.7669625,    236.80623002367034),
        (5257105.26166125,   236.8250596564228),
        (5325378.096960001,  236.8842171849862),
        (5361382.22895,      236.9154199247762),
        (5415388.426946251,  236.9622155966787),
        (5437125.921645001,  236.98104522989678)
    ]
    
         
    
    def test_correlate(self):
        """Using faked expected and observed flash/beep times, check the
        correlation algorithm finds the correct index in the expected flash/beep
        times corresponding to the first observed flash/beep; and check the
        reported variance is a sensible value."""
        
        metadata      = Test_DoComparison.fakeMetadata
        startSyncTime = Test_DoComparison.fakeStartSyncTime
        tickRate      = Test_DoComparison.fakeTickRate

        expected = [ startSyncTime + tickRate * t for t in metadata["eventCentreTimes"] ]
        observed = Test_DoComparison.fakeObservationData
        

        result = correlate(expected, observed)
        (index, timeDiffsAndErrors) = result
        
        self.assertEquals(index,30)
        
        
        
        
    
    def test_correlate2(self):
        """Using faked expected and observed flash/beep times, check the
        correlation algorithm finds the correct index in the expected flash/beep
        times corresponding to the first observed flash/beep; and check the
        reported variance is a sensible value."""
        
        metadata      = Test_DoComparison.fakeMetadata
        startSyncTime = Test_DoComparison.fakeStartSyncTime
        tickRate      = Test_DoComparison.fakeTickRate

        expected = [ startSyncTime + tickRate * t for t in metadata["eventCentreTimes"] ]
        observed = Test_DoComparison.fakeObservationData2
        

        result = correlate(expected, observed)
        (index, timeDiffsAndErrors) = result
        
        self.assertEquals(index,10)
        
        
        
    
    

if __name__ == "__main__":
    unittest.main()
